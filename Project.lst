Microsoft (R) Macro Assembler Version 14.35.32215.0	    06/11/23 13:47:17
Minesweeper(Minesweeper.asm				     Page 1 - 1


				TITLE Minesweeper(Minesweeper.asm)

				; Author(s) : Kaitlyn Laurie, Steve Akiyama
				; Course / Project ID Date : 6 / 10 / 2023
				; Description: Computes composite numbers.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data

				checkR MACRO boardlength
					; Sets eax to address of right
					mov eax, ebx
					inc eax

					; Range check
					cdq
					div boardlength; Dividing to check if it is out of range
				endm

				checkUR MACRO boardlength
				mov eax, ebx
				endm

				checkU MACRO boardlength
				mov eax, ebx
				endm

				checkUL MACRO boardlength
				mov eax, ebx

				; Range check
				cdq
				div boardLength
				cmp edx, 0
				endm

				checkL MACRO boardlength
				; Sets eax to starting address
				mov eax, ebx

				; Range check
				cdq
				div boardLength; Dividing to check if it is out of range
				endm

				checkDL MACRO boardlength
				mov eax, ebx
				add eax, boardlength
				endm

				checkD MACRO boardlength
				mov eax, ebx
				add eax, boardlength
				endm

				checkDR MACRO boardlength
				; Sets eax to address of right
				mov eax, ebx
				inc eax

				; Range check(No need to check down, as it is impossible to reach this without checking down)
				cdq
				div boardLength; Dividing to check if it is out of range
				endm



 00000000 57 65 6C 63 6F	welcome BYTE "Welcome to Minesweeper, by Kaitlyn Laurie and Steve Akiyama.", 0
	   6D 65 20 74 6F
	   20 4D 69 6E 65
	   73 77 65 65 70
	   65 72 2C 20 62
	   79 20 4B 61 69
	   74 6C 79 6E 20
	   4C 61 75 72 69
	   65 20 61 6E 64
	   20 53 74 65 76
	   65 20 41 6B 69
	   79 61 6D 61 2E
	   00
 0000003D 50 6C 65 61 73	instructions_1 BYTE "Please input the board size you would like.", 0
	   65 20 69 6E 70
	   75 74 20 74 68
	   65 20 62 6F 61
	   72 64 20 73 69
	   7A 65 20 79 6F
	   75 20 77 6F 75
	   6C 64 20 6C 69
	   6B 65 2E 00
 00000069 28 45 6E 74 65	instructions_2 BYTE "(Enter a number between 8 and 30): ", 0
	   72 20 61 20 6E
	   75 6D 62 65 72
	   20 62 65 74 77
	   65 65 6E 20 38
	   20 61 6E 64 20
	   33 30 29 3A 20
	   00
 0000008D 50 6C 65 61 73	instructions_3 BYTE "Please enter the column of the space you'd like to dig.", 0
	   65 20 65 6E 74
	   65 72 20 74 68
	   65 20 63 6F 6C
	   75 6D 6E 20 6F
	   66 20 74 68 65
	   20 73 70 61 63
	   65 20 79 6F 75
	   27 64 20 6C 69
	   6B 65 20 74 6F
	   20 64 69 67 2E
	   00
 000000C5 50 6C 65 61 73	instructions_4 BYTE "Please enter the row of the space you'd like to dig.", 0
	   65 20 65 6E 74
	   65 72 20 74 68
	   65 20 72 6F 77
	   20 6F 66 20 74
	   68 65 20 73 70
	   61 63 65 20 79
	   6F 75 27 64 20
	   6C 69 6B 65 20
	   74 6F 20 64 69
	   67 2E 00
 000000FA 54 68 61 6E 6B	goodbye BYTE "Thank you for playing Minesweeper! Goodbye!", 0
	   20 79 6F 75 20
	   66 6F 72 20 70
	   6C 61 79 69 6E
	   67 20 4D 69 6E
	   65 73 77 65 65
	   70 65 72 21 20
	   47 6F 6F 64 62
	   79 65 21 00

 00000126 00000000		unvisitedCell   DWORD 0

 0000012A 00000040		boardsize DWORD 64
 0000012E 00000008		boardlength DWORD 8
 00000132 0000000A		minecount DWORD 10
 00000136 00000001		game_state DWORD 1
 0000013A 00000000		target DWORD ?

				; constants
 = 00000008			BOARD_MINSIZE = 8
 = 0000001E			BOARD_MAXSIZE = 30
 = 00000384			MAX_BOARDSIZE = 900
 = 00000009			MINE_IDX = 9
 = 0000000A			SPACE_INI = 10

				; Array
 0000013E  00000384 [		board		DWORD MAX_BOARDSIZE Dup(SPACE_INI)
	    0000000A
	   ]

				; display characters
 00000F4E 20 20 20 20 20	space1		BYTE   "     ", 0
	   00
 00000F54 20 7C 20 00		line		BYTE   " | ", 0
 00000F58 2D 2D 2D 00		underscore  BYTE   "---", 0
 00000F5C 20 00			space2         BYTE   " ", 0
 00000F5E 2A 00			mine		BYTE   "*", 0


 00000000			.code
 00000000			main PROC

 00000000  E8 0000008A		call introduction
 00000005  E8 000000AE		call getData

 0000000A  A1 0000012A R	mov eax, boardsize
 0000000F  50			push eax
 00000010  A1 00000132 R	mov eax, minecount
 00000015  50			push eax
 00000016  E8 000000CE		call generation


 0000001B			gameLoop :
 0000001B  BE 0000013E R		mov ESI, OFFSET board
 00000020  FF 35 00000136 R		push game_state
 00000026  FF 35 0000012E R		push boardlength
 0000002C  E8 00000365			call DisplayBoard
 00000031  E8 000000E0			call userInput
 00000036  FF 35 0000013A R		push target
 0000003C  E8 00000135			call checkLocation
 00000041  E8 0000034F			call checkWin
 00000046  EB D3			jmp gameLoop



				; Some form of jump to gameLoop if checkWin is false

 00000048  E8 0000046A		call farewell

				exit
 0000004D  6A 00	   *	    push   +000000000h
 0000004F  E8 00000000 E   *	    call   ExitProcess
 00000054			main ENDP

 00000054			displayList PROC
 00000054  55			push ebp
 00000055  8B EC		mov  ebp, esp
 00000057  BB 00000000		mov	 ebx, 0
 0000005C  8B 75 0C		mov  esi, [ebp + 12]
 0000005F  8B 4D 08		mov	 ecx, [ebp + 8]
 00000062			displayLoop :
 00000062  8B 06		mov		eax, [esi]
 00000064  E8 00000000 E	call	WriteDec
 00000069  BA 00000F4E R	mov		edx, OFFSET space1
 0000006E  E8 00000000 E	call	WriteString
 00000073  43			inc		ebx
 00000074  3B 1D 0000012E R	cmp		ebx, boardlength
 0000007A  7C 0A		jl		skipCarry
 0000007C  E8 00000000 E	call	CrLf
 00000081  BB 00000000		mov		ebx, 0
 00000086			skipCarry:
 00000086  83 C6 04		add		esi, 4
 00000089  E2 D7		loop	displayLoop
 0000008B			endDisplayLoop :
 0000008B  5D			pop		ebp
 0000008C  C2 0008		ret		8
 0000008F			displayList ENDP

				; ******************************************************************************************************
				; INTRODUCTION PROCEDURE :
				; Description:		 Procedure to give the user instructions and an introduction to the program.
				; Receives:			 welcome, instructions_1, and instructions_2 are global variables
				; Returns:		     nothing
				; Preconditions:	 welcome, instructions_1, and instructions_2 must be set to strings
				; Registers Changed : edx,
				; ******************************************************************************************************

 0000008F			introduction PROC
 0000008F  E8 00000000 E	call Randomize
 00000094  E8 00000000 E	call CrLf
 00000099  BA 00000000 R	mov edx, OFFSET welcome
 0000009E  E8 00000000 E	call WriteString
 000000A3  E8 00000000 E	call CrLf

 000000A8  BA 0000003D R	mov	edx, OFFSET instructions_1
 000000AD  E8 00000000 E	call WriteString
 000000B2  E8 00000000 E	call CrLf
 000000B7  C3			ret

 000000B8			introduction ENDP

 000000B8			getData PROC
 000000B8  60				pushad
 000000B9				getInputs :
 000000B9  BA 00000069 R			mov	edx, OFFSET instructions_2
 000000BE  E8 00000000 E			call WriteString
 000000C3  E8 00000000 E			call crlf
 000000C8  E8 00000000 E			call ReadInt
 000000CD  83 F8 08				cmp eax, BOARD_MINSIZE
 000000D0  7C E7				jl getInputs
 000000D2  83 F8 1E				cmp eax, BOARD_MAXSIZE
 000000D5  7F E2				jg getInputs
 000000D7  A3 0000012E R			mov boardlength, eax
 000000DC  F7 25 0000012E R			mul boardlength
 000000E2  A3 0000012A R			mov boardsize, eax
 000000E7  61				popad
 000000E8  C3				ret
 000000E9			getData ENDP

 000000E9			generation PROC
 000000E9  8B EC		mov ebp, esp
 000000EB  8B 4D 04		mov ecx, [ebp + 4]; Address of how many mines to generate
 000000EE  8B 5D 08		mov ebx, [ebp + 8]; Address of how many tiles are available
 000000F1  60			pushad

 000000F2			generateMineLoop :
 000000F2  8B C3		mov eax, ebx
 000000F4  E8 00000000 E	call RandomRange
 000000F9  83 3C 85		cmp board[eax * 4], SPACE_INI
	   0000013E R 0A
 00000101  74 02		je nextMine
 00000103  EB ED		jmp generateMineLoop
 00000105			nextMine :
 00000105  C7 04 85		mov board[eax * 4], MINE_IDX
	   0000013E R
	   00000009
 00000110  E2 E0		loop generateMineLoop

 00000112  61			popad
 00000113  C2 0008		ret 8
 00000116			generation ENDP

 00000116			userInput PROC
 00000116  60				pushad
 00000117  E8 00000000 E		call crlf
 0000011C  E8 00000000 E		call crlf

 00000121				getInput1 : ; Get the column
 00000121  BA 0000008D R			mov	edx, OFFSET instructions_3
 00000126  E8 00000000 E			call WriteString
 0000012B  E8 00000000 E			call crlf
 00000130  E8 00000000 E			call ReadInt
 00000135  83 F8 01				cmp eax, 1
 00000138  7C E7				jl getInput1
 0000013A  3B 05 0000012E R			cmp eax, boardlength
 00000140  7F DF				jg getInput1
 00000142  48					dec eax
 00000143  8B D8				mov ebx, eax
 00000145				getInput2 : ; Get the row
 00000145  BA 000000C5 R			mov	edx, OFFSET instructions_4
 0000014A  E8 00000000 E			call WriteString
 0000014F  E8 00000000 E			call crlf
 00000154  E8 00000000 E			call ReadInt
 00000159  83 F8 01				cmp eax, 1
 0000015C  7C E7				jl getInput2
 0000015E  3B 05 0000012E R			cmp eax, boardlength
 00000164  7F DF				jg getInput2
 00000166  48					dec eax
 00000167  F7 25 0000012E R			mul boardlength

 0000016D  03 C3			add eax, ebx
 0000016F  A3 0000013A R		mov target, eax

 00000174  61				popad
 00000175  C3				ret
 00000176			userInput ENDP

				;******************************************************************************************************
				; checkLocation PROCEDURE :
				; Description:		 checks a tile and tiles around it if needed, recursively
				; Receives:		     n, a 4 byte int noting which tile should be checked initially
				; Returns:			 nothing, but updates board
				; Preconditions:	 board is initialized
				; Registers Changed : N / A
				; ******************************************************************************************************

 00000176			checkLocation PROC
 00000176  8B EC			mov ebp, esp
 00000178  60				pushad
 00000179  8B 5D 04			mov ebx, [ebp + 4]; move target to ebx

 0000017C  8B C3			mov eax, ebx
					;call crlf
					;call writeint
					;call crlf

 0000017E  B9 00000000			mov ecx, 0 ;mine counter

 00000183  83 3C 9D			cmp board[ebx * 4], 0
	   0000013E R 00
 0000018B  0F 84 00000200		je done ;if this tile has already been checked, then dont check it again
 00000191  83 3C 9D			cmp board[ebx * 4], 9
	   0000013E R 09
 00000199  0F 84 000001F2		je done ;TODO: Add a loss condition! The player hit a mine LOL
					
 0000019F				checkRight:

						checkR boardlength
 0000019F  8B C3	     1		mov eax, ebx
 000001A1  40		     1		inc eax
 000001A2  99		     1		cdq
 000001A3  F7 35 0000012E R  1		div boardlength; Dividing to check if it is out of range
 000001A9  83 FA 00				cmp edx, 0
 000001AC  74 2C				je checkUp ;If it is out of range, jump to up (UpRight will also be out of range)
						
 000001AE  8B C3				mov eax, ebx
 000001B0  40					inc eax

						;Check if the space is a mine
 000001B1  83 3C 85				cmp board[eax * 4], MINE_IDX
	   0000013E R 09
 000001B9  75 01				jne checkUpRight ;if it is not a mine, jump to next check

 000001BB  41					inc ecx ;increment the mine counter

 000001BC				checkUpRight:

						checkUR boardlength
 000001BC  8B C3	     1	mov eax, ebx
							
						; Range check
 000001BE  3B 05 0000012E R			cmp eax, boardLength
 000001C4  7C 56				jl checkLeft; We can skip checking all above indexes, as none will be accessable

 000001C6  8B C3				mov eax, ebx
 000001C8  2B 05 0000012E R			sub eax, boardLength
 000001CE  40					inc eax

 000001CF  83 3C 85				cmp board[eax * 4], MINE_IDX
	   0000013E R 09
 000001D7  75 01				jne checkUp

 000001D9  41					inc ecx

 000001DA				checkUp:
						; Sets eax to starting address
						checkU boardlength
 000001DA  8B C3	     1	mov eax, ebx

						; Range check
 000001DC  3B 05 0000012E R			cmp eax, boardLength
 000001E2  7C 38				jl checkLeft; We can skip checking all above indexes, as none will be accessable

 000001E4  8B C3				mov eax, ebx
 000001E6  2B 05 0000012E R			sub eax, boardLength

 000001EC  83 3C 85				cmp board[eax * 4], MINE_IDX
	   0000013E R 09
 000001F4  75 01				jne checkUpLeft

 000001F6  41					inc ecx

 000001F7				checkUpLeft:
						checkUL boardlength
 000001F7  8B C3	     1	mov eax, ebx
 000001F9  99		     1	cdq
 000001FA  F7 35 0000012E R  1	div boardlength
 00000200  83 FA 00	     1	cmp edx, 0
 00000203  83 FA 00				cmp edx, 0
 00000206  74 54				je checkDown ;We can skip the entire left segment if this is out of range

 00000208  8B C3				mov eax, ebx
 0000020A  2B 05 0000012E R			sub eax, boardLength
 00000210  48					dec eax

 00000211  83 3C 85				cmp board[eax * 4], MINE_IDX
	   0000013E R 09
 00000219  75 01				jne checkLeft

 0000021B  41					inc ecx

 0000021C				checkLeft:

						; Sets eax to starting address
						checkL boardlength
 0000021C  8B C3	     1	mov eax, ebx
 0000021E  99		     1	cdq
 0000021F  F7 35 0000012E R  1	div boardlength; Dividing to check if it is out of range
						
 00000225  83 FA 00				cmp edx, 0
 00000228  74 32				je checkDown; If it is out of range, jump to the next check

 0000022A  8B C3				mov eax, ebx
 0000022C  48					dec eax

						; Check if the space is a mine
 0000022D  83 3C 85				cmp board[eax * 4], MINE_IDX
	   0000013E R 09
 00000235  75 01				jne checkDownLeft; if it is not a mine, jump to next check

 00000237  41					inc ecx; increment the mine counter
					
 00000238				checkDownLeft:

						checkDL boardlength
 00000238  8B C3	     1	mov eax, ebx
 0000023A  03 05 0000012E R  1	add eax, boardlength
 00000240  3B 05 0000012A R			cmp eax, boardsize
 00000246  7F 5A				jg finishedCheck ;if this check fails, none of the downward checks would succeed

 00000248  8B C3				mov eax, ebx
 0000024A  03 05 0000012E R			add eax, boardlength
 00000250  48					dec eax

 00000251  83 3C 85				cmp board[eax * 4], MINE_IDX
	   0000013E R 09
 00000259  75 01				jne checkDown

 0000025B  41					inc ecx


 0000025C				checkDown:

						checkD boardlength
 0000025C  8B C3	     1	mov eax, ebx
 0000025E  03 05 0000012E R  1	add eax, boardlength

						; Range check
 00000264  3B 05 0000012A R			cmp eax, boardsize
 0000026A  7F 36				jg finishedCheck; if this check fails, none of the downward checks would succeed

 0000026C  8B C3				mov eax, ebx
 0000026E  03 05 0000012E R			add eax, boardlength

 00000274  83 3C 85				cmp board[eax * 4], MINE_IDX
	   0000013E R 09
 0000027C  75 01				jne checkDownRight

 0000027E  41					inc ecx

 0000027F				checkDownRight:
						checkDR boardlength
 0000027F  8B C3	     1	mov eax, ebx
 00000281  40		     1	inc eax
 00000282  99		     1	cdq
 00000283  F7 35 0000012E R  1	div boardlength; Dividing to check if it is out of range
 00000289  83 FA 00				cmp edx, 0
 0000028C  74 14				je finishedCheck; If it is out of range, jump to up(UpRight will also be out of range)

 0000028E  8B C3				mov eax, ebx
 00000290  40					inc eax
 00000291  03 05 0000012E R			add eax, boardLength

						; Check if the space is a mine
 00000297  83 3C 85				cmp board[eax * 4], MINE_IDX
	   0000013E R 09
 0000029F  75 01				jne finishedCheck; if it is not a mine, jump to next check

 000002A1  41					inc ecx; increment the mine counter

 000002A2				finishedCheck:

						; mov eax, ecx
						; call writeint
						; call crlf
						;mov eax, ebx
						;call writeint
						;call crlf


 000002A2  89 0C 9D				mov board[ebx * 4], ecx
	   0000013E R
 000002A9  83 F9 00				cmp ecx, 0
 000002AC  0F 85 000000DF			jne done ;if it is higher than 0, no need to call the recursive check
						
 000002B2				rightRec:
						checkR boardlength
 000002B2  8B C3	     1		mov eax, ebx
 000002B4  40		     1		inc eax
 000002B5  99		     1		cdq
 000002B6  F7 35 0000012E R  1		div boardlength; Dividing to check if it is out of range
 000002BC  83 FA 00				cmp edx, 0
 000002BF  74 26				je upRec
 000002C1  B8 00000001				mov eax, 1
 000002C6  03 C3				add eax, ebx
 000002C8  50					push eax
 000002C9  E8 FFFFFEA8				call checkLocation
 000002CE				upRightRec:
						checkUR boardlength
 000002CE  8B C3	     1	mov eax, ebx
 000002D0  3B 05 0000012E R			cmp eax, boardlength
 000002D6  7C 47				jl leftRec
 000002D8  8B C3				mov eax, ebx
 000002DA  2B 05 0000012E R			sub eax, boardlength
 000002E0  40					inc eax
 000002E1  50					push eax
 000002E2  E8 FFFFFE8F				call checkLocation
 000002E7				upRec:
						checkUR boardlength
 000002E7  8B C3	     1	mov eax, ebx
 000002E9  3B 05 0000012E R			cmp eax, boardlength
 000002EF  7C 2E				jl leftRec
 000002F1  8B C3				mov eax, ebx
 000002F3  2B 05 0000012E R			sub eax, boardlength
 000002F9  50					push eax
 000002FA  E8 FFFFFE77				call checkLocation
 000002FF				upLeftRec:
						checkUL boardlength
 000002FF  8B C3	     1	mov eax, ebx
 00000301  99		     1	cdq
 00000302  F7 35 0000012E R  1	div boardlength
 00000308  83 FA 00	     1	cmp edx, 0
 0000030B  83 FA 00				cmp edx, 0
 0000030E  74 45				je downRec
 00000310  8B C3				mov eax, ebx
 00000312  2B 05 0000012E R			sub eax, boardlength
 00000318  48					dec eax
 00000319  50					push eax
 0000031A  E8 FFFFFE57				call checklocation
 0000031F				leftRec:
						checkL boardlength
 0000031F  8B C3	     1	mov eax, ebx
 00000321  99		     1	cdq
 00000322  F7 35 0000012E R  1	div boardlength; Dividing to check if it is out of range
 00000328  83 FA 00				cmp edx, 0
 0000032B  74 28				je downRec
 0000032D  8B C3				mov eax, ebx
 0000032F  48					dec eax
 00000330  50					push eax
 00000331  E8 FFFFFE40				call checklocation
 00000336				downLeftRec:
						checkDL boardlength
 00000336  8B C3	     1	mov eax, ebx
 00000338  03 05 0000012E R  1	add eax, boardlength
 0000033E  3B 05 0000012A R			cmp eax, boardsize
 00000344  7F 4B				jg done
 00000346  8B C3				mov eax, ebx
 00000348  03 05 0000012E R			add eax, boardlength
 0000034E  48					dec eax
 0000034F  50					push eax
 00000350  E8 FFFFFE21				call checklocation
 00000355				downRec:
						checkDL boardlength
 00000355  8B C3	     1	mov eax, ebx
 00000357  03 05 0000012E R  1	add eax, boardlength
 0000035D  3B 05 0000012A R			cmp eax, boardsize
 00000363  7F 2C				jg done
 00000365  8B C3				mov eax, ebx
 00000367  03 05 0000012E R			add eax, boardlength
 0000036D  50					push eax
 0000036E  E8 FFFFFE03				call checklocation
 00000373				downRightRec:
						checkDR boardlength
 00000373  8B C3	     1	mov eax, ebx
 00000375  40		     1	inc eax
 00000376  99		     1	cdq
 00000377  F7 35 0000012E R  1	div boardlength; Dividing to check if it is out of range
 0000037D  83 FA 00				cmp edx, 0
 00000380  74 0F				je done
 00000382  8B C3				mov eax, ebx
 00000384  03 05 0000012E R			add eax, boardlength
 0000038A  40					inc eax
 0000038B  50					push eax
 0000038C  E8 FFFFFDE5				call checklocation




						
						



 00000391				done:

 00000391  61				popad
 00000392  C2 0004			ret 4
 00000395			checkLocation ENDP


 00000395			checkWin PROC
					
 00000395  C3				ret
 00000396			checkWin ENDP

				; ******************************************************************************************************
				; DisplayBoard PROCEDURE :
				; Description:		 display the state of game on screen
				; Receives:		     game_state:   1 if user is alive
				;					 board:        array of values representing board
				;					 board_length: n for board size n x n
				; Returns:			 nothing
				; Preconditions:	 board is initialized
				; Registers Changed : N / A
				; ******************************************************************************************************

 00000396			DisplayBoard PROC
 00000396  55				push EBP
 00000397  8B EC			mov EBP, ESP
 00000399  60				pushad

 0000039A  8B 5D 0C			mov EBX, [EBP + 12]; game_state in EBX
 0000039D  8B 4D 08			mov ECX, [EBP + 8]; boardlength in ECX

 000003A0  B8 00000001			mov EAX, 1; starting index

					; whitespace
 000003A5  BA 00000F4E R		mov EDX, OFFSET space1
 000003AA  E8 00000000 E		call WriteString
 000003AF  BA 00000F54 R		mov EDX, OFFSET line
 000003B4  E8 00000000 E		call WriteString

 000003B9				displayTop :
 000003B9  E8 00000000 E			call WriteDec
 000003BE  BA 00000F5C R			mov EDX, OFFSET space2
 000003C3  E8 00000000 E			call WriteString
 000003C8  BA 00000F54 R			mov EDX, OFFSET line
 000003CD  E8 00000000 E			call WriteString
 000003D2  40					inc EAX
 000003D3  E2 E4				loop displayTop

 000003D5  E8 00000000 E		call crlf
 000003DA  8B 4D 08			mov ECX, [EBP + 8]; boardlength in ECX
 000003DD  BA 00000F4E R		mov EDX, OFFSET space1
 000003E2  E8 00000000 E		call WriteString

 000003E7  BA 00000F5C R		mov EDX, OFFSET space2
 000003EC  E8 00000000 E		call WriteString

 000003F1				displayTopBorder :
 000003F1  BA 00000F5C R			mov EDX, OFFSET space2
 000003F6  E8 00000000 E			call WriteString
 000003FB  BA 00000F58 R			mov EDX, OFFSET underscore
 00000400  E8 00000000 E			call WriteString
 00000405  BA 00000F5C R			mov EDX, OFFSET space2
 0000040A  E8 00000000 E			call WriteString
 0000040F  E2 E0				loop displayTopBorder


 00000411  8B 4D 08				mov ECX, [EBP + 8] ;boardsize in ECX
 00000414  BA 00000001				mov EDX, 1 ;index counter
 00000419  BF 00000000				mov EDI, 0

 0000041E				outerLoop:
 0000041E  E8 00000000 E		call crlf

					; side display
 00000423  8B C2				mov EAX, EDX
 00000425  E8 00000000 E			call WriteDec
 0000042A  52					push EDX
 0000042B  BA 00000F54 R			mov EDX, OFFSET line
 00000430  E8 00000000 E			call WriteString
 00000435  BA 00000F5C R			mov EDX, OFFSET space2
 0000043A  E8 00000000 E			call WriteString
 0000043F  BA 00000F54 R			mov EDX, OFFSET line
 00000444  E8 00000000 E			call WriteString
 00000449  5A					pop EDX

						; set up inner loop counter
 0000044A  51					push ECX
 0000044B  8B 4D 08				mov ECX, [EBP + 8]

 0000044E				innerLoop:
						; value check control structure
 0000044E  8B 06				mov EAX, [ESI]
 00000450  E8 00000000 E			call WriteDec
 00000455  83 F8 0A				cmp EAX, 10
 00000458  74 0A				je unvisited
 0000045A  83 F8 09				cmp EAX, 9
 0000045D  7C 28				jl cleared

						; check if game is over
 0000045F  83 FB 01				cmp EBX, 1
 00000462  7C 36				jl gameOver

 00000464				unvisited :
					; display mine on unfinished game as empty or unvisited block
 00000464  52				push EDX
 00000465  BA 00000F5C R		mov EDX, OFFSET space2
 0000046A  E8 00000000 E		call WriteString
 0000046F  BA 00000F54 R		mov EDX, OFFSET line
 00000474  E8 00000000 E		call WriteString
 00000479  5A				pop EDX

 0000047A  EB 00			jmp endOfLoop

 0000047C				endOfLoop :
 0000047C  83 C6 04			add ESI, 4
 0000047F  E2 CD			loop innerLoop

					; go into outer loop
 00000481  42				inc EDX
 00000482  59				pop ECX
 00000483  E2 99			loop outerLoop
 00000485  EB 2B			jmp endOfProc

 00000487				cleared :
 00000487  E8 00000000 E		call WriteDec
 0000048C  52				push EDX
 0000048D  BA 00000F54 R		mov EDX, OFFSET line
 00000492  5A				pop EDX
 00000493  E8 00000000 E		call WriteString
 00000498  EB E2			jmp endOfLoop

 0000049A				gameOver :
 0000049A  52				push EDX
 0000049B  BA 00000F5E R		mov EDX, OFFSET mine
 000004A0  E8 00000000 E		call WriteString
 000004A5  BA 00000F54 R		mov EDX, OFFSET line
 000004AA  E8 00000000 E		call WriteString
 000004AF  5A				pop EDX
 000004B0  EB CA			jmp endOfLoop



 000004B2				endOfProc:
 000004B2  61				popad
 000004B3  5D				pop EBP
 000004B4  C2 0010			ret 16
 000004B7			DisplayBoard ENDP




				; ******************************************************************************************************
				; FAREWELL PROCEDURE :
				; Description:		 Procedure to say goodbye to the user.
				; Receives:		     goodbye is global variables.
				; Returns:			 nothing
				; Preconditions:	 goodbyte must be set to strings.
				; Registers Changed : edx,
				; ******************************************************************************************************

 000004B7			farewell PROC
				; say goodbye

 000004B7  E8 00000000 E	call CrLf
 000004BC  BA 000000FA R	mov	edx, OFFSET goodbye
 000004C1  E8 00000000 E	call WriteString
 000004C6  E8 00000000 E	call CrLf
 000004CB  E8 00000000 E	call CrLf
				exit
 000004D0  6A 00	   *	    push   +000000000h
 000004D2  E8 00000000 E   *	    call   ExitProcess
 000004D7			farewell ENDP

				END main
Microsoft (R) Macro Assembler Version 14.35.32215.0	    06/11/23 13:47:17
Minesweeper(Minesweeper.asm				     Symbols 2 - 1




Macros:

                N a m e                 Type

checkDL  . . . . . . . . . . . .	Proc
checkDR  . . . . . . . . . . . .	Proc
checkD . . . . . . . . . . . . .	Proc
checkL . . . . . . . . . . . . .	Proc
checkR . . . . . . . . . . . . .	Proc
checkUL  . . . . . . . . . . . .	Proc
checkUR  . . . . . . . . . . . .	Proc
checkU . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000F60 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000004D7 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DisplayBoard . . . . . . . . . .	P Near	 00000396 _TEXT	Length= 00000121 Public STDCALL
  displayTop . . . . . . . . . .	L Near	 000003B9 _TEXT	
  displayTopBorder . . . . . . .	L Near	 000003F1 _TEXT	
  outerLoop  . . . . . . . . . .	L Near	 0000041E _TEXT	
  innerLoop  . . . . . . . . . .	L Near	 0000044E _TEXT	
  unvisited  . . . . . . . . . .	L Near	 00000464 _TEXT	
  endOfLoop  . . . . . . . . . .	L Near	 0000047C _TEXT	
  cleared  . . . . . . . . . . .	L Near	 00000487 _TEXT	
  gameOver . . . . . . . . . . .	L Near	 0000049A _TEXT	
  endOfProc  . . . . . . . . . .	L Near	 000004B2 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
checkLocation  . . . . . . . . .	P Near	 00000176 _TEXT	Length= 0000021F Public STDCALL
  checkRight . . . . . . . . . .	L Near	 0000019F _TEXT	
  checkUpRight . . . . . . . . .	L Near	 000001BC _TEXT	
  checkUp  . . . . . . . . . . .	L Near	 000001DA _TEXT	
  checkUpLeft  . . . . . . . . .	L Near	 000001F7 _TEXT	
  checkLeft  . . . . . . . . . .	L Near	 0000021C _TEXT	
  checkDownLeft  . . . . . . . .	L Near	 00000238 _TEXT	
  checkDown  . . . . . . . . . .	L Near	 0000025C _TEXT	
  checkDownRight . . . . . . . .	L Near	 0000027F _TEXT	
  finishedCheck  . . . . . . . .	L Near	 000002A2 _TEXT	
  rightRec . . . . . . . . . . .	L Near	 000002B2 _TEXT	
  upRightRec . . . . . . . . . .	L Near	 000002CE _TEXT	
  upRec  . . . . . . . . . . . .	L Near	 000002E7 _TEXT	
  upLeftRec  . . . . . . . . . .	L Near	 000002FF _TEXT	
  leftRec  . . . . . . . . . . .	L Near	 0000031F _TEXT	
  downLeftRec  . . . . . . . . .	L Near	 00000336 _TEXT	
  downRec  . . . . . . . . . . .	L Near	 00000355 _TEXT	
  downRightRec . . . . . . . . .	L Near	 00000373 _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000391 _TEXT	
checkWin . . . . . . . . . . . .	P Near	 00000395 _TEXT	Length= 00000001 Public STDCALL
displayList  . . . . . . . . . .	P Near	 00000054 _TEXT	Length= 0000003B Public STDCALL
  displayLoop  . . . . . . . . .	L Near	 00000062 _TEXT	
  skipCarry  . . . . . . . . . .	L Near	 00000086 _TEXT	
  endDisplayLoop . . . . . . . .	L Near	 0000008B _TEXT	
farewell . . . . . . . . . . . .	P Near	 000004B7 _TEXT	Length= 00000020 Public STDCALL
generation . . . . . . . . . . .	P Near	 000000E9 _TEXT	Length= 0000002D Public STDCALL
  generateMineLoop . . . . . . .	L Near	 000000F2 _TEXT	
  nextMine . . . . . . . . . . .	L Near	 00000105 _TEXT	
getData  . . . . . . . . . . . .	P Near	 000000B8 _TEXT	Length= 00000031 Public STDCALL
  getInputs  . . . . . . . . . .	L Near	 000000B9 _TEXT	
introduction . . . . . . . . . .	P Near	 0000008F _TEXT	Length= 00000029 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000054 Public STDCALL
  gameLoop . . . . . . . . . . .	L Near	 0000001B _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
userInput  . . . . . . . . . . .	P Near	 00000116 _TEXT	Length= 00000060 Public STDCALL
  getInput1  . . . . . . . . . .	L Near	 00000121 _TEXT	
  getInput2  . . . . . . . . . .	L Near	 00000145 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BOARD_MAXSIZE  . . . . . . . . .	Number	 0000001Eh   
BOARD_MINSIZE  . . . . . . . . .	Number	 00000008h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_BOARDSIZE  . . . . . . . . .	Number	 00000384h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MINE_IDX . . . . . . . . . . . .	Number	 00000009h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
SPACE_INI  . . . . . . . . . . .	Number	 0000000Ah   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
boardlength  . . . . . . . . . .	DWord	 0000012E _DATA	
boardsize  . . . . . . . . . . .	DWord	 0000012A _DATA	
board  . . . . . . . . . . . . .	DWord	 0000013E _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
game_state . . . . . . . . . . .	DWord	 00000136 _DATA	
goodbye  . . . . . . . . . . . .	Byte	 000000FA _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instructions_1 . . . . . . . . .	Byte	 0000003D _DATA	
instructions_2 . . . . . . . . .	Byte	 00000069 _DATA	
instructions_3 . . . . . . . . .	Byte	 0000008D _DATA	
instructions_4 . . . . . . . . .	Byte	 000000C5 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
line . . . . . . . . . . . . . .	Byte	 00000F54 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
minecount  . . . . . . . . . . .	DWord	 00000132 _DATA	
mine . . . . . . . . . . . . . .	Byte	 00000F5E _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
space1 . . . . . . . . . . . . .	Byte	 00000F4E _DATA	
space2 . . . . . . . . . . . . .	Byte	 00000F5C _DATA	
target . . . . . . . . . . . . .	DWord	 0000013A _DATA	
underscore . . . . . . . . . . .	Byte	 00000F58 _DATA	
unvisitedCell  . . . . . . . . .	DWord	 00000126 _DATA	
welcome  . . . . . . . . . . . .	Byte	 00000000 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors

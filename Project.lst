Microsoft (R) Macro Assembler Version 14.35.32215.0	    06/11/23 14:12:16
Minesweeper(Minesweeper.asm				     Page 1 - 1


				TITLE Minesweeper(Minesweeper.asm)

				; Author(s) : Kaitlyn Laurie, Steve Akiyama
				; Course / Project ID Date : 6 / 10 / 2023
				; Description: Computes composite numbers.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data

				print MACRO string
					call crlf
					mov edx, offset string
					call writestring
				endm

				checkR MACRO boardlength
					; Sets eax to address of right
					mov eax, ebx
					inc eax

					; Range check
					cdq
					div boardlength; Dividing to check if it is out of range
				endm

				checkUR MACRO boardlength
				mov eax, ebx
				endm

				checkU MACRO boardlength
				mov eax, ebx
				endm

				checkUL MACRO boardlength
				mov eax, ebx

				; Range check
				cdq
				div boardLength
				cmp edx, 0
				endm

				checkL MACRO boardlength
				; Sets eax to starting address
				mov eax, ebx

				; Range check
				cdq
				div boardLength; Dividing to check if it is out of range
				endm

				checkDL MACRO boardlength
				mov eax, ebx
				add eax, boardlength
				endm

				checkD MACRO boardlength
				mov eax, ebx
				add eax, boardlength
				endm

				checkDR MACRO boardlength
				; Sets eax to address of right
				mov eax, ebx
				inc eax

				; Range check(No need to check down, as it is impossible to reach this without checking down)
				cdq
				div boardLength; Dividing to check if it is out of range
				endm



 00000000 57 65 6C 63 6F	welcome BYTE "Welcome to Minesweeper, by Kaitlyn Laurie and Steve Akiyama.", 0
	   6D 65 20 74 6F
	   20 4D 69 6E 65
	   73 77 65 65 70
	   65 72 2C 20 62
	   79 20 4B 61 69
	   74 6C 79 6E 20
	   4C 61 75 72 69
	   65 20 61 6E 64
	   20 53 74 65 76
	   65 20 41 6B 69
	   79 61 6D 61 2E
	   00
 0000003D 50 6C 65 61 73	instructions_1 BYTE "Please input the board size you would like.", 0
	   65 20 69 6E 70
	   75 74 20 74 68
	   65 20 62 6F 61
	   72 64 20 73 69
	   7A 65 20 79 6F
	   75 20 77 6F 75
	   6C 64 20 6C 69
	   6B 65 2E 00
 00000069 28 45 6E 74 65	instructions_2 BYTE "(Enter a number between 8 and 30): ", 0
	   72 20 61 20 6E
	   75 6D 62 65 72
	   20 62 65 74 77
	   65 65 6E 20 38
	   20 61 6E 64 20
	   33 30 29 3A 20
	   00
 0000008D 50 6C 65 61 73	instructions_3 BYTE "Please enter the column of the space you'd like to dig.", 0
	   65 20 65 6E 74
	   65 72 20 74 68
	   65 20 63 6F 6C
	   75 6D 6E 20 6F
	   66 20 74 68 65
	   20 73 70 61 63
	   65 20 79 6F 75
	   27 64 20 6C 69
	   6B 65 20 74 6F
	   20 64 69 67 2E
	   00
 000000C5 50 6C 65 61 73	instructions_4 BYTE "Please enter the row of the space you'd like to dig.", 0
	   65 20 65 6E 74
	   65 72 20 74 68
	   65 20 72 6F 77
	   20 6F 66 20 74
	   68 65 20 73 70
	   61 63 65 20 79
	   6F 75 27 64 20
	   6C 69 6B 65 20
	   74 6F 20 64 69
	   67 2E 00
 000000FA 50 6C 65 61 73	instructions_5 BYTE "Please enter what difficulty you would like.", 0
	   65 20 65 6E 74
	   65 72 20 77 68
	   61 74 20 64 69
	   66 66 69 63 75
	   6C 74 79 20 79
	   6F 75 20 77 6F
	   75 6C 64 20 6C
	   69 6B 65 2E 00
 00000127 31 2E 20 45 61	instructions_6 BYTE "1. Easy (Fewest mines)", 0
	   73 79 20 28 46
	   65 77 65 73 74
	   20 6D 69 6E 65
	   73 29 00
 0000013E 32 2E 20 4D 65	instructions_7 BYTE "2. Medium (Standard mine count)", 0
	   64 69 75 6D 20
	   28 53 74 61 6E
	   64 61 72 64 20
	   6D 69 6E 65 20
	   63 6F 75 6E 74
	   29 00
 0000015E 33 2E 20 48 61	instructions_8 BYTE "3. Hard (High mine count)", 0
	   72 64 20 28 48
	   69 67 68 20 6D
	   69 6E 65 20 63
	   6F 75 6E 74 29
	   00
 00000178 34 2E 20 45 78	instructions_9 BYTE "4. Extreme (Very high mine count)", 0
	   74 72 65 6D 65
	   20 28 56 65 72
	   79 20 68 69 67
	   68 20 6D 69 6E
	   65 20 63 6F 75
	   6E 74 29 00
 0000019A 50 6C 65 61 73	instructions_10 BYTE "Please enter which difficulty you would like. (1-4)", 0
	   65 20 65 6E 74
	   65 72 20 77 68
	   69 63 68 20 64
	   69 66 66 69 63
	   75 6C 74 79 20
	   79 6F 75 20 77
	   6F 75 6C 64 20
	   6C 69 6B 65 2E
	   20 28 31 2D 34
	   29 00
 000001CE 4F 68 20 6E 6F	gameLoss BYTE "Oh no! You dug up a mine. Better luck next time!", 0
	   21 20 59 6F 75
	   20 64 75 67 20
	   75 70 20 61 20
	   6D 69 6E 65 2E
	   20 42 65 74 74
	   65 72 20 6C 75
	   63 6B 20 6E 65
	   78 74 20 74 69
	   6D 65 21 00
 000001FF 43 6F 6E 67 72	gameWin BYTE "Congrats! You survived the minefield.", 0
	   61 74 73 21 20
	   59 6F 75 20 73
	   75 72 76 69 76
	   65 64 20 74 68
	   65 20 6D 69 6E
	   65 66 69 65 6C
	   64 2E 00
 00000225 54 68 61 6E 6B	goodbye BYTE "Thank you for playing Minesweeper! Goodbye!", 0
	   20 79 6F 75 20
	   66 6F 72 20 70
	   6C 61 79 69 6E
	   67 20 4D 69 6E
	   65 73 77 65 65
	   70 65 72 21 20
	   47 6F 6F 64 62
	   79 65 21 00

 00000251 00000000		unvisitedCell   DWORD 0

 00000255 00000040		boardsize DWORD 64
 00000259 00000008		boardlength DWORD 8
 0000025D 00000001		difficulty DWORD 1
 00000261 0000000A		minecount DWORD 10
 00000265 00000001		game_state DWORD 1
 00000269 00000000		target DWORD ?

				; constants
 = 00000008			BOARD_MINSIZE = 8
 = 0000001E			BOARD_MAXSIZE = 30
 = 00000384			MAX_BOARDSIZE = 900
 = 00000009			MINE_IDX = 9
 = 0000000A			SPACE_INI = 10

				; Array
 0000026D  00000384 [		board		DWORD MAX_BOARDSIZE Dup(SPACE_INI)
	    0000000A
	   ]

				; display characters
 0000107D 20 20 20 20 20	space1		BYTE   "     ", 0
	   00
 00001083 20 7C 20 00		line		BYTE   " | ", 0
 00001087 2D 2D 2D 00		underscore  BYTE   "---", 0
 0000108B 20 00			space2         BYTE   " ", 0
 0000108D 2A 00			mine		BYTE   "*", 0


 00000000			.code
 00000000			main PROC

 00000000  E8 000000D0		call introduction
 00000005  E8 000000F4		call getData

 0000000A  A1 00000255 R		mov eax, boardsize
 0000000F  50				push eax
 00000010  A1 0000025D R		mov eax, difficulty
 00000015  50				push eax
 00000016  E8 0000018C			call generation
					
 0000001B				gameLoop :

						;push OFFSET board
						;push boardsize
						;call displayList
 0000001B  BE 0000026D R			mov ESI, OFFSET board
 00000020  FF 35 00000265 R			push game_state
 00000026  FF 35 00000259 R			push boardlength
 0000002C  E8 00000462				call DisplayBoard

 00000031  E8 000001AD				call userInput

 00000036  FF 35 00000269 R			push target
 0000003C  E8 00000202				call checkLocation

 00000041  E8 00000428				call checkWin

 00000046  83 3D 00000265 R			cmp game_state, 1
	   01
 0000004D  74 CC				je gameLoop
 0000004F  7C 02				jl hitMine
 00000051  7F 16				jg wonGame

 00000053				hitMine:
 00000053  E8 00000000 E			call crlf
 00000058  BA 000001CE R			mov edx, offset gameLoss
 0000005D  E8 00000000 E			call writestring
 00000062  E8 00000000 E			call crlf
 00000067  EB 14				jmp done

 00000069				wonGame:
 00000069  E8 00000000 E			call crlf
 0000006E  BA 000001FF R			mov edx, offset gameWin
 00000073  E8 00000000 E			call writestring
 00000078  E8 00000000 E			call crlf

 0000007D				done:
 0000007D  BE 0000026D R			mov ESI, OFFSET board
 00000082  FF 35 00000265 R			push game_state
 00000088  FF 35 00000259 R			push boardlength
 0000008E  E8 00000400				call DisplayBoard

				exit
 00000093  6A 00	   *	    push   +000000000h
 00000095  E8 00000000 E   *	    call   ExitProcess
 0000009A			main ENDP

 0000009A			displayList PROC
 0000009A  55			push ebp
 0000009B  8B EC		mov  ebp, esp
 0000009D  BB 00000000		mov	 ebx, 0
 000000A2  8B 75 0C		mov  esi, [ebp + 12]
 000000A5  8B 4D 08		mov	 ecx, [ebp + 8]
 000000A8			displayLoop :
 000000A8  8B 06		mov		eax, [esi]
 000000AA  E8 00000000 E	call	WriteDec
 000000AF  BA 0000107D R	mov		edx, OFFSET space1
 000000B4  E8 00000000 E	call	WriteString
 000000B9  43			inc		ebx
 000000BA  3B 1D 00000259 R	cmp		ebx, boardlength
 000000C0  7C 0A		jl		skipCarry
 000000C2  E8 00000000 E	call	CrLf
 000000C7  BB 00000000		mov		ebx, 0
 000000CC			skipCarry:
 000000CC  83 C6 04		add		esi, 4
 000000CF  E2 D7		loop	displayLoop
 000000D1			endDisplayLoop :
 000000D1  5D			pop		ebp
 000000D2  C2 0008		ret		8
 000000D5			displayList ENDP

				; ******************************************************************************************************
				; INTRODUCTION PROCEDURE :
				; Description:		 Procedure to give the user instructions and an introduction to the program.
				; Receives:			 welcome, instructions_1, and instructions_2 are global variables
				; Returns:		     nothing
				; Preconditions:	 welcome, instructions_1, and instructions_2 must be set to strings
				; Registers Changed : edx,
				; ******************************************************************************************************

 000000D5			introduction PROC
 000000D5  E8 00000000 E	call Randomize
 000000DA  E8 00000000 E	call CrLf
 000000DF  BA 00000000 R	mov edx, OFFSET welcome
 000000E4  E8 00000000 E	call WriteString
 000000E9  E8 00000000 E	call CrLf

 000000EE  BA 0000003D R	mov	edx, OFFSET instructions_1
 000000F3  E8 00000000 E	call WriteString
 000000F8  E8 00000000 E	call CrLf
 000000FD  C3			ret

 000000FE			introduction ENDP

 000000FE			getData PROC
 000000FE  60				pushad
 000000FF				getInputs :
 000000FF  BA 00000069 R			mov	edx, OFFSET instructions_2
 00000104  E8 00000000 E			call WriteString
 00000109  E8 00000000 E			call crlf
 0000010E  E8 00000000 E			call ReadInt
 00000113  83 F8 08				cmp eax, BOARD_MINSIZE
 00000116  7C E7				jl getInputs
 00000118  83 F8 1E				cmp eax, BOARD_MAXSIZE
 0000011B  7F E2				jg getInputs
 0000011D  A3 00000259 R			mov boardlength, eax
 00000122  F7 25 00000259 R			mul boardlength
 00000128  A3 00000255 R			mov boardsize, eax
 0000012D				getDifficulty:
						print instructions_5
 0000012D  E8 00000000 E     1		call crlf
 00000132  BA 000000FA R     1		mov edx, offset instructions_5
 00000137  E8 00000000 E     1		call writestring
						print instructions_6
 0000013C  E8 00000000 E     1		call crlf
 00000141  BA 00000127 R     1		mov edx, offset instructions_6
 00000146  E8 00000000 E     1		call writestring
						print instructions_7
 0000014B  E8 00000000 E     1		call crlf
 00000150  BA 0000013E R     1		mov edx, offset instructions_7
 00000155  E8 00000000 E     1		call writestring
						print instructions_8
 0000015A  E8 00000000 E     1		call crlf
 0000015F  BA 0000015E R     1		mov edx, offset instructions_8
 00000164  E8 00000000 E     1		call writestring
						print instructions_9
 00000169  E8 00000000 E     1		call crlf
 0000016E  BA 00000178 R     1		mov edx, offset instructions_9
 00000173  E8 00000000 E     1		call writestring
						print instructions_10
 00000178  E8 00000000 E     1		call crlf
 0000017D  BA 0000019A R     1		mov edx, offset instructions_10
 00000182  E8 00000000 E     1		call writestring
 00000187  E8 00000000 E			call crlf
 0000018C  E8 00000000 E			call readint
 00000191  83 F8 01				cmp eax, 1
 00000194  7C 97				jl getDifficulty
 00000196  83 F8 04				cmp eax, 4
 00000199  7F 92				jg getDifficulty
 0000019B  A3 0000025D R			mov difficulty, eax
 000001A0  E8 00000000 E			call crlf
 000001A5  61				popad
 000001A6  C3				ret
 000001A7			getData ENDP

 000001A7			generation PROC
 000001A7  8B EC			mov ebp, esp
 000001A9  8B 4D 04			mov ecx, [ebp + 4]; Address of difficulty
 000001AC  8B 45 08			mov eax, [ebp + 8]; Address of how many tiles are available
 000001AF  60				pushad

 000001B0  BB 00000007			mov ebx, 7
 000001B5  2B D9			sub ebx, ecx
 000001B7  99				cdq
 000001B8  F7 F3			div ebx
 000001BA  8B C8			mov ecx, eax
 000001BC  8B 5D 08			mov ebx, [ebp + 8]

 000001BF				generateMineLoop :
 000001BF  8B C3				mov eax, ebx
 000001C1  E8 00000000 E			call RandomRange
 000001C6  83 3C 85				cmp board[eax * 4], SPACE_INI
	   0000026D R 0A
 000001CE  74 02				je nextMine
 000001D0  EB ED				jmp generateMineLoop
 000001D2					nextMine :
 000001D2  C7 04 85				mov board[eax * 4], MINE_IDX
	   0000026D R
	   00000009
 000001DD  E2 E0				loop generateMineLoop

 000001DF  61				popad
 000001E0  C2 0008			ret 8
 000001E3			generation ENDP

 000001E3			userInput PROC
 000001E3  60				pushad
 000001E4  E8 00000000 E		call crlf
 000001E9  E8 00000000 E		call crlf

 000001EE				getInput1 : ; Get the column
 000001EE  BA 0000008D R			mov	edx, OFFSET instructions_3
 000001F3  E8 00000000 E			call WriteString
 000001F8  E8 00000000 E			call crlf
 000001FD  E8 00000000 E			call ReadInt
 00000202  83 F8 01				cmp eax, 1
 00000205  7C E7				jl getInput1
 00000207  3B 05 00000259 R			cmp eax, boardlength
 0000020D  7F DF				jg getInput1
 0000020F  48					dec eax
 00000210  8B D8				mov ebx, eax
 00000212				getInput2 : ; Get the row
 00000212  BA 000000C5 R			mov	edx, OFFSET instructions_4
 00000217  E8 00000000 E			call WriteString
 0000021C  E8 00000000 E			call crlf
 00000221  E8 00000000 E			call ReadInt
 00000226  83 F8 01				cmp eax, 1
 00000229  7C E7				jl getInput2
 0000022B  3B 05 00000259 R			cmp eax, boardlength
 00000231  7F DF				jg getInput2
 00000233  48					dec eax
 00000234  F7 25 00000259 R			mul boardlength

 0000023A  03 C3			add eax, ebx
 0000023C  A3 00000269 R		mov target, eax

 00000241  61				popad
 00000242  C3				ret
 00000243			userInput ENDP

				;******************************************************************************************************
				; checkLocation PROCEDURE :
				; Description:		 checks a tile and tiles around it if needed, recursively
				; Receives:		     n, a 4 byte int noting which tile should be checked initially
				; Returns:			 nothing, but updates board
				; Preconditions:	 board is initialized
				; Registers Changed : N / A
				; ******************************************************************************************************

 00000243			checkLocation PROC
 00000243  8B EC			mov ebp, esp
 00000245  60				pushad
 00000246  8B 5D 04			mov ebx, [ebp + 4]; move target to ebx

 00000249  8B C3			mov eax, ebx
					;call crlf
					;call writeint
					;call crlf

 0000024B  B9 00000000			mov ecx, 0 ;mine counter

 00000250  83 3C 9D			cmp board[ebx * 4], 0
	   0000026D R 00
 00000258  0F 84 0000020C		je done ;if this tile has already been checked, then dont check it again
 0000025E  83 3C 9D			cmp board[ebx * 4], 9
	   0000026D R 09
 00000266  0F 84 000001F4		je died ;TODO: Add a loss condition! The player hit a mine LOL
					
 0000026C				checkRight:

						checkR boardlength
 0000026C  8B C3	     1		mov eax, ebx
 0000026E  40		     1		inc eax
 0000026F  99		     1		cdq
 00000270  F7 35 00000259 R  1		div boardlength; Dividing to check if it is out of range
 00000276  83 FA 00				cmp edx, 0
 00000279  74 2C				je checkUp ;If it is out of range, jump to up (UpRight will also be out of range)
						
 0000027B  8B C3				mov eax, ebx
 0000027D  40					inc eax

						;Check if the space is a mine
 0000027E  83 3C 85				cmp board[eax * 4], MINE_IDX
	   0000026D R 09
 00000286  75 01				jne checkUpRight ;if it is not a mine, jump to next check

 00000288  41					inc ecx ;increment the mine counter

 00000289				checkUpRight:

						checkUR boardlength
 00000289  8B C3	     1	mov eax, ebx
							
						; Range check
 0000028B  3B 05 00000259 R			cmp eax, boardLength
 00000291  7C 56				jl checkLeft; We can skip checking all above indexes, as none will be accessable

 00000293  8B C3				mov eax, ebx
 00000295  2B 05 00000259 R			sub eax, boardLength
 0000029B  40					inc eax

 0000029C  83 3C 85				cmp board[eax * 4], MINE_IDX
	   0000026D R 09
 000002A4  75 01				jne checkUp

 000002A6  41					inc ecx

 000002A7				checkUp:
						; Sets eax to starting address
						checkU boardlength
 000002A7  8B C3	     1	mov eax, ebx

						; Range check
 000002A9  3B 05 00000259 R			cmp eax, boardLength
 000002AF  7C 38				jl checkLeft; We can skip checking all above indexes, as none will be accessable

 000002B1  8B C3				mov eax, ebx
 000002B3  2B 05 00000259 R			sub eax, boardLength

 000002B9  83 3C 85				cmp board[eax * 4], MINE_IDX
	   0000026D R 09
 000002C1  75 01				jne checkUpLeft

 000002C3  41					inc ecx

 000002C4				checkUpLeft:
						checkUL boardlength
 000002C4  8B C3	     1	mov eax, ebx
 000002C6  99		     1	cdq
 000002C7  F7 35 00000259 R  1	div boardlength
 000002CD  83 FA 00	     1	cmp edx, 0
 000002D0  83 FA 00				cmp edx, 0
 000002D3  74 54				je checkDown ;We can skip the entire left segment if this is out of range

 000002D5  8B C3				mov eax, ebx
 000002D7  2B 05 00000259 R			sub eax, boardLength
 000002DD  48					dec eax

 000002DE  83 3C 85				cmp board[eax * 4], MINE_IDX
	   0000026D R 09
 000002E6  75 01				jne checkLeft

 000002E8  41					inc ecx

 000002E9				checkLeft:

						; Sets eax to starting address
						checkL boardlength
 000002E9  8B C3	     1	mov eax, ebx
 000002EB  99		     1	cdq
 000002EC  F7 35 00000259 R  1	div boardlength; Dividing to check if it is out of range
						
 000002F2  83 FA 00				cmp edx, 0
 000002F5  74 32				je checkDown; If it is out of range, jump to the next check

 000002F7  8B C3				mov eax, ebx
 000002F9  48					dec eax

						; Check if the space is a mine
 000002FA  83 3C 85				cmp board[eax * 4], MINE_IDX
	   0000026D R 09
 00000302  75 01				jne checkDownLeft; if it is not a mine, jump to next check

 00000304  41					inc ecx; increment the mine counter
					
 00000305				checkDownLeft:

						checkDL boardlength
 00000305  8B C3	     1	mov eax, ebx
 00000307  03 05 00000259 R  1	add eax, boardlength
 0000030D  3B 05 00000255 R			cmp eax, boardsize
 00000313  7F 5A				jg finishedCheck ;if this check fails, none of the downward checks would succeed

 00000315  8B C3				mov eax, ebx
 00000317  03 05 00000259 R			add eax, boardlength
 0000031D  48					dec eax

 0000031E  83 3C 85				cmp board[eax * 4], MINE_IDX
	   0000026D R 09
 00000326  75 01				jne checkDown

 00000328  41					inc ecx


 00000329				checkDown:

						checkD boardlength
 00000329  8B C3	     1	mov eax, ebx
 0000032B  03 05 00000259 R  1	add eax, boardlength

						; Range check
 00000331  3B 05 00000255 R			cmp eax, boardsize
 00000337  7F 36				jg finishedCheck; if this check fails, none of the downward checks would succeed

 00000339  8B C3				mov eax, ebx
 0000033B  03 05 00000259 R			add eax, boardlength

 00000341  83 3C 85				cmp board[eax * 4], MINE_IDX
	   0000026D R 09
 00000349  75 01				jne checkDownRight

 0000034B  41					inc ecx

 0000034C				checkDownRight:
						checkDR boardlength
 0000034C  8B C3	     1	mov eax, ebx
 0000034E  40		     1	inc eax
 0000034F  99		     1	cdq
 00000350  F7 35 00000259 R  1	div boardlength; Dividing to check if it is out of range
 00000356  83 FA 00				cmp edx, 0
 00000359  74 14				je finishedCheck; If it is out of range, jump to up(UpRight will also be out of range)

 0000035B  8B C3				mov eax, ebx
 0000035D  40					inc eax
 0000035E  03 05 00000259 R			add eax, boardLength

						; Check if the space is a mine
 00000364  83 3C 85				cmp board[eax * 4], MINE_IDX
	   0000026D R 09
 0000036C  75 01				jne finishedCheck; if it is not a mine, jump to next check

 0000036E  41					inc ecx; increment the mine counter

 0000036F				finishedCheck:

						; mov eax, ecx
						; call writeint
						; call crlf
						;mov eax, ebx
						;call writeint
						;call crlf


 0000036F  89 0C 9D				mov board[ebx * 4], ecx
	   0000026D R
 00000376  83 F9 00				cmp ecx, 0
 00000379  0F 85 000000EB			jne done ;if it is higher than 0, no need to call the recursive check
						
 0000037F				rightRec:
						checkR boardlength
 0000037F  8B C3	     1		mov eax, ebx
 00000381  40		     1		inc eax
 00000382  99		     1		cdq
 00000383  F7 35 00000259 R  1		div boardlength; Dividing to check if it is out of range
 00000389  83 FA 00				cmp edx, 0
 0000038C  74 26				je upRec
 0000038E  B8 00000001				mov eax, 1
 00000393  03 C3				add eax, ebx
 00000395  50					push eax
 00000396  E8 FFFFFEA8				call checkLocation
 0000039B				upRightRec:
						checkUR boardlength
 0000039B  8B C3	     1	mov eax, ebx
 0000039D  3B 05 00000259 R			cmp eax, boardlength
 000003A3  7C 47				jl leftRec
 000003A5  8B C3				mov eax, ebx
 000003A7  2B 05 00000259 R			sub eax, boardlength
 000003AD  40					inc eax
 000003AE  50					push eax
 000003AF  E8 FFFFFE8F				call checkLocation
 000003B4				upRec:
						checkUR boardlength
 000003B4  8B C3	     1	mov eax, ebx
 000003B6  3B 05 00000259 R			cmp eax, boardlength
 000003BC  7C 2E				jl leftRec
 000003BE  8B C3				mov eax, ebx
 000003C0  2B 05 00000259 R			sub eax, boardlength
 000003C6  50					push eax
 000003C7  E8 FFFFFE77				call checkLocation
 000003CC				upLeftRec:
						checkUL boardlength
 000003CC  8B C3	     1	mov eax, ebx
 000003CE  99		     1	cdq
 000003CF  F7 35 00000259 R  1	div boardlength
 000003D5  83 FA 00	     1	cmp edx, 0
 000003D8  83 FA 00				cmp edx, 0
 000003DB  74 45				je downRec
 000003DD  8B C3				mov eax, ebx
 000003DF  2B 05 00000259 R			sub eax, boardlength
 000003E5  48					dec eax
 000003E6  50					push eax
 000003E7  E8 FFFFFE57				call checklocation
 000003EC				leftRec:
						checkL boardlength
 000003EC  8B C3	     1	mov eax, ebx
 000003EE  99		     1	cdq
 000003EF  F7 35 00000259 R  1	div boardlength; Dividing to check if it is out of range
 000003F5  83 FA 00				cmp edx, 0
 000003F8  74 28				je downRec
 000003FA  8B C3				mov eax, ebx
 000003FC  48					dec eax
 000003FD  50					push eax
 000003FE  E8 FFFFFE40				call checklocation
 00000403				downLeftRec:
						checkDL boardlength
 00000403  8B C3	     1	mov eax, ebx
 00000405  03 05 00000259 R  1	add eax, boardlength
 0000040B  3B 05 00000255 R			cmp eax, boardsize
 00000411  7F 57				jg done
 00000413  8B C3				mov eax, ebx
 00000415  03 05 00000259 R			add eax, boardlength
 0000041B  48					dec eax
 0000041C  50					push eax
 0000041D  E8 FFFFFE21				call checklocation
 00000422				downRec:
						checkDL boardlength
 00000422  8B C3	     1	mov eax, ebx
 00000424  03 05 00000259 R  1	add eax, boardlength
 0000042A  3B 05 00000255 R			cmp eax, boardsize
 00000430  7F 38				jg done
 00000432  8B C3				mov eax, ebx
 00000434  03 05 00000259 R			add eax, boardlength
 0000043A  50					push eax
 0000043B  E8 FFFFFE03				call checklocation
 00000440				downRightRec:
						checkDR boardlength
 00000440  8B C3	     1	mov eax, ebx
 00000442  40		     1	inc eax
 00000443  99		     1	cdq
 00000444  F7 35 00000259 R  1	div boardlength; Dividing to check if it is out of range
 0000044A  83 FA 00				cmp edx, 0
 0000044D  74 1B				je done
 0000044F  8B C3				mov eax, ebx
 00000451  03 05 00000259 R			add eax, boardlength
 00000457  40					inc eax
 00000458  50					push eax
 00000459  E8 FFFFFDE5				call checklocation

 0000045E  EB 0A			jmp done

 00000460				died:
 00000460  C7 05 00000265 R			mov game_state, 0
	   00000000

 0000046A				done:

 0000046A  61				popad
 0000046B  C2 0004			ret 4
 0000046E			checkLocation ENDP


 0000046E			checkWin PROC
 0000046E  60				pushad
 0000046F  8B 0D 00000255 R		mov ecx, boardsize
 00000475  49				dec ecx
 00000476  B8 00000000			mov eax, 0

 0000047B				checkLoop:
 0000047B  83 3C 8D				cmp board[ecx * 4], 10
	   0000026D R 0A
 00000483  74 0C				je continueGame
 00000485  E2 F4				loop checkLoop

 00000487  C7 05 00000265 R		mov game_state, 2
	   00000002

 00000491				continueGame:

 00000491  61				popad
 00000492  C3				ret
 00000493			checkWin ENDP

				; ******************************************************************************************************
				; DisplayBoard PROCEDURE :
				; Description:		 display the state of game on screen
				; Receives:		     game_state:   1 if user is alive
				;					 board:        array of values representing board
				;					 board_length: n for board size n x n
				; Returns:			 nothing
				; Preconditions:	 board is initialized
				; Registers Changed : N / A
				; ******************************************************************************************************

 00000493			DisplayBoard PROC
 00000493  55				push EBP
 00000494  8B EC			mov EBP, ESP
 00000496  60				pushad

 00000497  8B 5D 0C			mov EBX, [EBP + 12]; game_state in EBX
 0000049A  8B 4D 08			mov ECX, [EBP + 8]; boardlength in ECX

 0000049D  B8 00000001			mov EAX, 1; starting index

					; whitespace
 000004A2  BA 0000107D R		mov EDX, OFFSET space1
 000004A7  E8 00000000 E		call WriteString
 000004AC  BA 0000108B R		mov EDX, OFFSET space2
 000004B1  E8 00000000 E		call WriteString
 000004B6  BA 00001083 R		mov EDX, OFFSET line
 000004BB  E8 00000000 E		call WriteString

 000004C0				displayTop :
 000004C0  E8 00000000 E			call WriteDec
 000004C5  BA 00001083 R			mov EDX, OFFSET line
 000004CA  E8 00000000 E			call WriteString
 000004CF  40					inc EAX
 000004D0  E2 EE				loop displayTop

 000004D2  E8 00000000 E		call crlf
 000004D7  8B 4D 08			mov ECX, [EBP + 8]; boardlength in ECX
 000004DA  BA 0000107D R		mov EDX, OFFSET space1
 000004DF  E8 00000000 E		call WriteString

 000004E4  BA 0000108B R		mov EDX, OFFSET space2
 000004E9  E8 00000000 E		call WriteString
 000004EE  BA 0000108B R		mov EDX, OFFSET space2
 000004F3  E8 00000000 E		call WriteString

 000004F8				displayTopBorder :
 000004F8  BA 0000108B R			mov EDX, OFFSET space2
 000004FD  E8 00000000 E			call WriteString
 00000502  BA 00001087 R			mov EDX, OFFSET underscore
 00000507  E8 00000000 E			call WriteString
 0000050C  E2 EA				loop displayTopBorder


 0000050E  8B 4D 08				mov ECX, [EBP + 8] ;boardsize in ECX
 00000511  BA 00000001				mov EDX, 1 ;index counter
 00000516  BF 00000000				mov EDI, 0

 0000051B				outerLoop:
 0000051B  E8 00000000 E		call crlf

					; side display
 00000520  52					push EDX
						mov EDX, space2
Minesweeper.asm(644) : error A2022:instruction operands must be the same size
 00000521  E8 00000000 E			call WriteString
 00000526  5A					pop EDX
 00000527  8B C2				mov EAX, EDX
 00000529  E8 00000000 E			call WriteDec
 0000052E  52					push EDX
 0000052F  BA 00001083 R			mov EDX, OFFSET line
 00000534  E8 00000000 E			call WriteString
 00000539  BA 0000108B R			mov EDX, OFFSET space2
 0000053E  E8 00000000 E			call WriteString
 00000543  BA 0000108B R			mov EDX, OFFSET space2
 00000548  E8 00000000 E			call WriteString
 0000054D  BA 00001083 R			mov EDX, OFFSET line
 00000552  E8 00000000 E			call WriteString
 00000557  5A					pop EDX

						; set up inner loop counter
 00000558  51					push ECX
 00000559  8B 4D 08				mov ECX, [EBP + 8]

 00000567				innerLoop:
					; value check control structure
 00000567  8B 06			mov EAX, [ESI]
					;call WriteDec
 00000569  83 F8 0A			cmp EAX, 10
 0000056C  74 0A			je unvisited
 0000056E  83 F8 09			cmp EAX, 9
 00000571  7C 28			jl cleared

						; check if game is over
 00000573  83 FB 01				cmp EBX, 1
 00000576  7C 36				jl gameOver

 00000578				unvisited :
						; display mine on unfinished game as empty or unvisited block
 00000578  52					push EDX
 00000579  BA 0000108B R			mov EDX, OFFSET space2
 0000057E  E8 00000000 E			call WriteString
 00000583  BA 00001083 R			mov EDX, OFFSET line
 00000588  E8 00000000 E			call WriteString
 0000058D  5A					pop EDX

 0000058E  EB 00				jmp endOfLoop

 00000590				endOfLoop :
 00000590  83 C6 04			add ESI, 4
 00000593  E2 D2			loop innerLoop

					; go into outer loop
 00000595  42					inc EDX
 00000596  59					pop ECX
 00000597  E2 82				loop outerLoop
 00000599  EB 2B				jmp endOfProc

 0000059B				cleared :
 0000059B  E8 00000000 E		call WriteDec
 000005A0  52				push edx
 000005A1  BA 00001083 R		mov EDX, OFFSET line
 000005A6  E8 00000000 E		call WriteString
 000005AB  5A				pop edx
 000005AC  EB E2			jmp endOfLoop

 000005AE				gameOver :
 000005AE  52				push EDX
 000005AF  BA 0000108D R		mov EDX, OFFSET mine
 000005B4  E8 00000000 E		call WriteString
 000005B9  BA 00001083 R		mov EDX, OFFSET line
 000005BE  E8 00000000 E		call WriteString
 000005C3  5A				pop EDX
 000005C4  EB CA			jmp endOfLoop



 000005C6				endOfProc:
 000005C6  61				popad
 000005C7  5D				pop EBP
 000005C8  C2 0010			ret 16
 000005CB			DisplayBoard ENDP




				; ******************************************************************************************************
				; FAREWELL PROCEDURE :
				; Description:		 Procedure to say goodbye to the user.
				; Receives:		     goodbye is global variables.
				; Returns:			 nothing
				; Preconditions:	 goodbyte must be set to strings.
				; Registers Changed : edx,
				; ******************************************************************************************************

 000005CB			farewell PROC
				; say goodbye

 000005CB  E8 00000000 E	call CrLf
 000005D0  BA 00000225 R	mov	edx, OFFSET goodbye
 000005D5  E8 00000000 E	call WriteString
 000005DA  E8 00000000 E	call CrLf
 000005DF  E8 00000000 E	call CrLf
				exit
 000005E4  6A 00	   *	    push   +000000000h
 000005E6  E8 00000000 E   *	    call   ExitProcess
 000005EB			farewell ENDP

				END main
Microsoft (R) Macro Assembler Version 14.35.32215.0	    06/11/23 14:12:16
Minesweeper(Minesweeper.asm				     Symbols 2 - 1




Macros:

                N a m e                 Type

checkDL  . . . . . . . . . . . .	Proc
checkDR  . . . . . . . . . . . .	Proc
checkD . . . . . . . . . . . . .	Proc
checkL . . . . . . . . . . . . .	Proc
checkR . . . . . . . . . . . . .	Proc
checkUL  . . . . . . . . . . . .	Proc
checkUR  . . . . . . . . . . . .	Proc
checkU . . . . . . . . . . . . .	Proc
print  . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000108F Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000005EB Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DisplayBoard . . . . . . . . . .	P Near	 00000493 _TEXT	Length= 00000138 Public STDCALL
  displayTop . . . . . . . . . .	L Near	 000004C0 _TEXT	
  displayTopBorder . . . . . . .	L Near	 000004F8 _TEXT	
  outerLoop  . . . . . . . . . .	L Near	 0000051B _TEXT	
  innerLoop  . . . . . . . . . .	L Near	 00000567 _TEXT	
  unvisited  . . . . . . . . . .	L Near	 00000578 _TEXT	
  endOfLoop  . . . . . . . . . .	L Near	 00000590 _TEXT	
  cleared  . . . . . . . . . . .	L Near	 0000059B _TEXT	
  gameOver . . . . . . . . . . .	L Near	 000005AE _TEXT	
  endOfProc  . . . . . . . . . .	L Near	 000005C6 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
checkLocation  . . . . . . . . .	P Near	 00000243 _TEXT	Length= 0000022B Public STDCALL
  checkRight . . . . . . . . . .	L Near	 0000026C _TEXT	
  checkUpRight . . . . . . . . .	L Near	 00000289 _TEXT	
  checkUp  . . . . . . . . . . .	L Near	 000002A7 _TEXT	
  checkUpLeft  . . . . . . . . .	L Near	 000002C4 _TEXT	
  checkLeft  . . . . . . . . . .	L Near	 000002E9 _TEXT	
  checkDownLeft  . . . . . . . .	L Near	 00000305 _TEXT	
  checkDown  . . . . . . . . . .	L Near	 00000329 _TEXT	
  checkDownRight . . . . . . . .	L Near	 0000034C _TEXT	
  finishedCheck  . . . . . . . .	L Near	 0000036F _TEXT	
  rightRec . . . . . . . . . . .	L Near	 0000037F _TEXT	
  upRightRec . . . . . . . . . .	L Near	 0000039B _TEXT	
  upRec  . . . . . . . . . . . .	L Near	 000003B4 _TEXT	
  upLeftRec  . . . . . . . . . .	L Near	 000003CC _TEXT	
  leftRec  . . . . . . . . . . .	L Near	 000003EC _TEXT	
  downLeftRec  . . . . . . . . .	L Near	 00000403 _TEXT	
  downRec  . . . . . . . . . . .	L Near	 00000422 _TEXT	
  downRightRec . . . . . . . . .	L Near	 00000440 _TEXT	
  died . . . . . . . . . . . . .	L Near	 00000460 _TEXT	
  done . . . . . . . . . . . . .	L Near	 0000046A _TEXT	
checkWin . . . . . . . . . . . .	P Near	 0000046E _TEXT	Length= 00000025 Public STDCALL
  checkLoop  . . . . . . . . . .	L Near	 0000047B _TEXT	
  continueGame . . . . . . . . .	L Near	 00000491 _TEXT	
displayList  . . . . . . . . . .	P Near	 0000009A _TEXT	Length= 0000003B Public STDCALL
  displayLoop  . . . . . . . . .	L Near	 000000A8 _TEXT	
  skipCarry  . . . . . . . . . .	L Near	 000000CC _TEXT	
  endDisplayLoop . . . . . . . .	L Near	 000000D1 _TEXT	
farewell . . . . . . . . . . . .	P Near	 000005CB _TEXT	Length= 00000020 Public STDCALL
generation . . . . . . . . . . .	P Near	 000001A7 _TEXT	Length= 0000003C Public STDCALL
  generateMineLoop . . . . . . .	L Near	 000001BF _TEXT	
  nextMine . . . . . . . . . . .	L Near	 000001D2 _TEXT	
getData  . . . . . . . . . . . .	P Near	 000000FE _TEXT	Length= 000000A9 Public STDCALL
  getInputs  . . . . . . . . . .	L Near	 000000FF _TEXT	
  getDifficulty  . . . . . . . .	L Near	 0000012D _TEXT	
introduction . . . . . . . . . .	P Near	 000000D5 _TEXT	Length= 00000029 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000009A Public STDCALL
  gameLoop . . . . . . . . . . .	L Near	 0000001B _TEXT	
  hitMine  . . . . . . . . . . .	L Near	 00000053 _TEXT	
  wonGame  . . . . . . . . . . .	L Near	 00000069 _TEXT	
  done . . . . . . . . . . . . .	L Near	 0000007D _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
userInput  . . . . . . . . . . .	P Near	 000001E3 _TEXT	Length= 00000060 Public STDCALL
  getInput1  . . . . . . . . . .	L Near	 000001EE _TEXT	
  getInput2  . . . . . . . . . .	L Near	 00000212 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BOARD_MAXSIZE  . . . . . . . . .	Number	 0000001Eh   
BOARD_MINSIZE  . . . . . . . . .	Number	 00000008h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_BOARDSIZE  . . . . . . . . .	Number	 00000384h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MINE_IDX . . . . . . . . . . . .	Number	 00000009h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
SPACE_INI  . . . . . . . . . . .	Number	 0000000Ah   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
boardlength  . . . . . . . . . .	DWord	 00000259 _DATA	
boardsize  . . . . . . . . . . .	DWord	 00000255 _DATA	
board  . . . . . . . . . . . . .	DWord	 0000026D _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
difficulty . . . . . . . . . . .	DWord	 0000025D _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gameLoss . . . . . . . . . . . .	Byte	 000001CE _DATA	
gameWin  . . . . . . . . . . . .	Byte	 000001FF _DATA	
game_state . . . . . . . . . . .	DWord	 00000265 _DATA	
goodbye  . . . . . . . . . . . .	Byte	 00000225 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instructions_10  . . . . . . . .	Byte	 0000019A _DATA	
instructions_1 . . . . . . . . .	Byte	 0000003D _DATA	
instructions_2 . . . . . . . . .	Byte	 00000069 _DATA	
instructions_3 . . . . . . . . .	Byte	 0000008D _DATA	
instructions_4 . . . . . . . . .	Byte	 000000C5 _DATA	
instructions_5 . . . . . . . . .	Byte	 000000FA _DATA	
instructions_6 . . . . . . . . .	Byte	 00000127 _DATA	
instructions_7 . . . . . . . . .	Byte	 0000013E _DATA	
instructions_8 . . . . . . . . .	Byte	 0000015E _DATA	
instructions_9 . . . . . . . . .	Byte	 00000178 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
line . . . . . . . . . . . . . .	Byte	 00001083 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
minecount  . . . . . . . . . . .	DWord	 00000261 _DATA	
mine . . . . . . . . . . . . . .	Byte	 0000108D _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
space1 . . . . . . . . . . . . .	Byte	 0000107D _DATA	
space2 . . . . . . . . . . . . .	Byte	 0000108B _DATA	
target . . . . . . . . . . . . .	DWord	 00000269 _DATA	
underscore . . . . . . . . . . .	Byte	 00001087 _DATA	
unvisitedCell  . . . . . . . . .	DWord	 00000251 _DATA	
welcome  . . . . . . . . . . . .	Byte	 00000000 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   1 Errors

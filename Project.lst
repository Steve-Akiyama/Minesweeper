Microsoft (R) Macro Assembler Version 14.35.32215.0	    06/10/23 20:04:43
Minesweeper (Minesweeper.asm				     Page 1 - 1


				TITLE Minesweeper (Minesweeper.asm)

				; Author(s) : Kaitlyn Laurie, Steve Akiyama
				; Course / Project ID Date : 6 / 10 / 2023
				; Description: Computes composite numbers.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data

 00000000 57 65 6C 63 6F	welcome BYTE "Welcome to Minesweeper, by Kaitlyn Laurie and Steve Akiyama.", 0
	   6D 65 20 74 6F
	   20 4D 69 6E 65
	   73 77 65 65 70
	   65 72 2C 20 62
	   79 20 4B 61 69
	   74 6C 79 6E 20
	   4C 61 75 72 69
	   65 20 61 6E 64
	   20 53 74 65 76
	   65 20 41 6B 69
	   79 61 6D 61 2E
	   00
 0000003D 50 6C 65 61 73	instructions_1 BYTE "Please input the board size you would like.", 0
	   65 20 69 6E 70
	   75 74 20 74 68
	   65 20 62 6F 61
	   72 64 20 73 69
	   7A 65 20 79 6F
	   75 20 77 6F 75
	   6C 64 20 6C 69
	   6B 65 2E 00
 00000069 28 45 6E 74 65	instructions_2 BYTE "(Enter a number between 8 and 30): ", 0
	   72 20 61 20 6E
	   75 6D 62 65 72
	   20 62 65 74 77
	   65 65 6E 20 38
	   20 61 6E 64 20
	   33 30 29 3A 20
	   00
 0000008D 54 68 61 6E 6B	goodbye BYTE "Thank you for playing Minesweeper! Goodbye!", 0
	   20 79 6F 75 20
	   66 6F 72 20 70
	   6C 61 79 69 6E
	   67 20 4D 69 6E
	   65 73 77 65 65
	   70 65 72 21 20
	   47 6F 6F 64 62
	   79 65 21 00

 000000B9 00000000		unvisitedCell   DWORD 0

 000000BD 00000040		boardsize DWORD 64
 000000C1 00000008		boardlength DWORD 8
 000000C5 00000010		minecount DWORD 16
 000000C9 00000001		game_state DWORD 1

				; constants
 = 00000008			BOARD_MINSIZE = 8
 = 0000001E			BOARD_MAXSIZE = 30
 = 00000384			MAX_BOARDSIZE = 900

				; Array
 000000CD  00000384 [		board		DWORD MAX_BOARDSIZE Dup(10)
	    0000000A
	   ]

				;display characters
 00000EDD 20 20 20 20 20	space1		BYTE   "     ", 0
	   00
 00000EE3 20 7C 20 00		line		BYTE   " | ", 0
 00000EE7 2D 2D 2D 00		underscore  BYTE   "---", 0
 00000EEB 20 00			space2         BYTE   " ", 0
 00000EED 2A 00			mine		BYTE   "*", 0


 00000000			.code
 00000000			main PROC

 00000000  E8 0000004C			call introduction
 00000005  E8 00000070			call getData

 0000000A  A1 000000BD R		mov eax, boardsize
 0000000F  50				push eax
 00000010  A1 000000C5 R		mov eax, minecount
 00000015  50				push eax
 00000016  E8 00000090			call generation

 0000001B  BE 000000CD R		mov ESI, OFFSET board
 00000020				gameLoop:
 00000020  E8 000000B1				call userInput
 00000025  E8 000000AD				call checkLocation
 0000002A  E8 000000A9				call checkWin

 0000002F  68 000000CD R			push OFFSET board
 00000034  FF 35 000000C9 R			push game_state
 0000003A  FF 35 000000C1 R			push boardlength
 00000040  E8 00000094				call DisplayBoard
						
						; Some form of jump to gameLoop if checkWin is false

 00000045  E8 000001AE			call farewell

				exit
 0000004A  6A 00	   *	    push   +000000000h
 0000004C  E8 00000000 E   *	    call   ExitProcess
 00000051			main ENDP

				;******************************************************************************************************
				; INTRODUCTION PROCEDURE :
				; Description:		 Procedure to give the user instructions and an introduction to the program.
				; Receives:			 welcome, instructions_1, and instructions_2 are global variables
				; Returns:		     nothing
				; Preconditions:	 welcome, instructions_1, and instructions_2 must be set to strings
				; Registers Changed : edx,
				; ******************************************************************************************************

 00000051			introduction PROC
 00000051  E8 00000000 E		call Randomize
 00000056  E8 00000000 E		call CrLf
 0000005B  BA 00000000 R		mov edx, OFFSET welcome
 00000060  E8 00000000 E		call WriteString
 00000065  E8 00000000 E		call CrLf

 0000006A  BA 0000003D R		mov	edx, OFFSET instructions_1
 0000006F  E8 00000000 E		call WriteString
 00000074  E8 00000000 E		call CrLf
 00000079  C3				ret

 0000007A			introduction ENDP

 0000007A			getData PROC
 0000007A  60				pushad
 0000007B				getInputs:
 0000007B  BA 00000069 R			mov	edx, OFFSET instructions_2
 00000080  E8 00000000 E			call WriteString
 00000085  E8 00000000 E			call crlf
 0000008A  E8 00000000 E			call ReadInt
 0000008F  83 F8 08				cmp eax, BOARD_MINSIZE
 00000092  7C E7				jl getInputs
 00000094  83 F8 1E				cmp eax, BOARD_MAXSIZE
 00000097  7F E2				jg getInputs
 00000099  A3 000000C1 R			mov boardlength, eax
 0000009E  F7 25 000000C1 R			mul boardlength
 000000A4  A3 000000BD R			mov boardsize, eax
 000000A9  61				popad
 000000AA  C3				ret
 000000AB			getData ENDP

 000000AB			generation PROC
 000000AB  8B EC			mov ebp, esp
 000000AD  8B 4D 04			mov ecx, [ebp + 4] ;Address of how many mines to generate
 000000B0  8B 5D 08			mov ebx, [ebp + 8] ;Address of how many tiles are available
 000000B3  60				pushad

 000000B4				generateMineLoop:
 000000B4  8B C3				mov eax, ebx
 000000B6  E8 00000000 E			call RandomRange
 000000BB  83 3C 85				cmp board[eax * 4], 10
	   000000CD R 0A
 000000C3  74 02				je nextMine
 000000C5  EB ED				jmp generateMineLoop
 000000C7				nextMine:
 000000C7  C7 04 85				mov board[eax * 4], 9
	   000000CD R
	   00000009
 000000D2  E2 E0				loop generateMineLoop

 000000D4  61				popad
 000000D5  C3				ret
 000000D6			generation ENDP

 000000D6			userInput PROC
					
 000000D6  C3				ret
 000000D7			userInput ENDP

 000000D7			checkLocation PROC
 000000D7  C3				ret
 000000D8			checkLocation ENDP

 000000D8			checkWin PROC
 000000D8  C3				ret
 000000D9			checkWin ENDP

				;******************************************************************************************************
				; DisplayBoard PROCEDURE :
				; Description:		 display the state of game on screen
				; Receives:		     game_state:   1 if user is alive
				;					 board:        array of values representing board
				;					 board_length: n for board size n x n
				; Returns:			 nothing
				; Preconditions:	 board is initialized
				; Registers Changed : N / A
				; ******************************************************************************************************

 000000D9			DisplayBoard PROC
 000000D9  55				push EBP
 000000DA  8B EC			mov EBP, ESP
 000000DC  60				pushad

 000000DD  8B 5D 0C			mov EBX, [EBP + 12]  ;game_state in EBX
 000000E0  8B 4D 08			mov ECX, [EBP + 8]   ;boardlength in ECX

 000000E3  B8 00000001			mov EAX, 1 ;starting index

					;whitespace
 000000E8  BA 00000EDD R		mov EDX, OFFSET space1
 000000ED  E8 00000000 E		call WriteString
 000000F2  BA 00000EE3 R		mov EDX, OFFSET line
 000000F7  E8 00000000 E		call WriteString

 000000FC				displayTop :
 000000FC  E8 00000000 E			call WriteDec
 00000101  BA 00000EEB R			mov EDX, OFFSET space2
 00000106  E8 00000000 E			call WriteString
 0000010B  BA 00000EE3 R			mov EDX, OFFSET line
 00000110  E8 00000000 E			call WriteString
 00000115  40					inc EAX
 00000116  E2 E4				loop displayTop

 00000118  E8 00000000 E		call crlf
 0000011D  8B 4D 08			mov ECX, [EBP + 8]; boardlength in ECX
 00000120  BA 00000EDD R		mov EDX, OFFSET space1
 00000125  E8 00000000 E		call WriteString
 0000012A  BA 00000EEB R		mov EDX, OFFSET space2
 0000012F  E8 00000000 E		call WriteString

 00000134				displayTopBorder :
 00000134  BA 00000EEB R			mov EDX, OFFSET space2
 00000139  E8 00000000 E			call WriteString
 0000013E  BA 00000EE7 R			mov EDX, OFFSET underscore
 00000143  E8 00000000 E			call WriteString
 00000148  BA 00000EEB R			mov EDX, OFFSET space2
 0000014D  E8 00000000 E			call WriteString
 00000152  E2 E0				loop displayTopBorder


 00000154  8B 4D 08			mov ECX, [EBP + 8]  ;boardsize in ECX
 00000157  BA 00000001			mov EDX, 1           ;index counter
 0000015C  BF 00000000			mov EDI, 0

 00000161				outerLoop:
 00000161  E8 00000000 E			call crlf
						
						;side display
 00000166  8B C2				mov EAX, EDX
 00000168  E8 00000000 E			call WriteDec
 0000016D  52					push EDX
 0000016E  BA 00000EE3 R			mov EDX, OFFSET line
 00000173  E8 00000000 E			call WriteString
 00000178  BA 00000EEB R			mov EDX, OFFSET space2
 0000017D  E8 00000000 E			call WriteString
 00000182  BA 00000EE3 R			mov EDX, OFFSET line
 00000187  E8 00000000 E			call WriteString
 0000018C  5A					pop EDX

						;set up inner loop counter
 0000018D  51					push ECX
 0000018E  8B 4D 08				mov ECX, [EBP + 8]

 00000191					innerLoop:
							;value check control structure
 00000191  8B 06					mov EAX, [ESI]
 00000193  E8 00000000 E				call WriteDec
 00000198  83 F8 00					cmp EAX, 0
 0000019B  74 0A					je unvisited
 0000019D  83 F8 09					cmp EAX, 9
 000001A0  7C 28					jl cleared

							;check if game is over
 000001A2  83 FB 01					cmp EBX, 1
 000001A5  7C 34					jl gameOver

 000001A7						unvisited :
								;display mine on unfinished game as empty or unvisited block
 000001A7  52							push EDX
 000001A8  BA 00000EEB R					mov EDX, OFFSET space2
 000001AD  E8 00000000 E					call WriteString
 000001B2  BA 00000EE3 R					mov EDX, OFFSET line
 000001B7  E8 00000000 E					call WriteString
 000001BC  5A							pop EDX

 000001BD  EB 00						jmp endOfLoop

 000001BF						endOfLoop :
 000001BF  83 C6 04						add ESI, 4
 000001C2  E2 CD						loop innerLoop

								; go into outer loop
 000001C4  42							inc EDX
 000001C5  59							pop ECX
 000001C6  E2 99						loop outerLoop
 000001C8  EB 29						jmp endOfProc

 000001CA						cleared :
 000001CA  E8 00000000 E					call WriteDec
 000001CF  BA 00000EE3 R					mov EDX, OFFSET line
 000001D4  E8 00000000 E					call WriteString
 000001D9  EB E4						jmp endOfLoop

 000001DB						gameOver :
 000001DB  52							push EDX
 000001DC  BA 00000EED R					mov EDX, OFFSET mine
 000001E1  E8 00000000 E					call WriteString
 000001E6  BA 00000EE3 R					mov EDX, OFFSET line
 000001EB  E8 00000000 E					call WriteString
 000001F0  5A							pop EDX
 000001F1  EB CC						jmp endOfLoop

					

 000001F3				endOfProc:
 000001F3  61					popad
 000001F4  5D					pop EBP
 000001F5  C2 0010				ret 16
 000001F8			DisplayBoard ENDP




				;******************************************************************************************************
				; FAREWELL PROCEDURE :
				; Description:		 Procedure to say goodbye to the user.
				; Receives:		     goodbye is global variables.
				; Returns:			 nothing
				; Preconditions:	 goodbyte must be set to strings.
				; Registers Changed : edx,
				; ******************************************************************************************************

 000001F8			farewell PROC
					; say goodbye

 000001F8  E8 00000000 E		call CrLf
 000001FD  BA 0000008D R		mov	edx, OFFSET goodbye
 00000202  E8 00000000 E		call WriteString
 00000207  E8 00000000 E		call CrLf
 0000020C  E8 00000000 E		call CrLf
					exit
 00000211  6A 00	   *	    push   +000000000h
 00000213  E8 00000000 E   *	    call   ExitProcess
 00000218			farewell ENDP

				END main
Microsoft (R) Macro Assembler Version 14.35.32215.0	    06/10/23 20:04:43
Minesweeper (Minesweeper.asm				     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000EEF Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000218 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DisplayBoard . . . . . . . . . .	P Near	 000000D9 _TEXT	Length= 0000011F Public STDCALL
  displayTop . . . . . . . . . .	L Near	 000000FC _TEXT	
  displayTopBorder . . . . . . .	L Near	 00000134 _TEXT	
  outerLoop  . . . . . . . . . .	L Near	 00000161 _TEXT	
  innerLoop  . . . . . . . . . .	L Near	 00000191 _TEXT	
  unvisited  . . . . . . . . . .	L Near	 000001A7 _TEXT	
  endOfLoop  . . . . . . . . . .	L Near	 000001BF _TEXT	
  cleared  . . . . . . . . . . .	L Near	 000001CA _TEXT	
  gameOver . . . . . . . . . . .	L Near	 000001DB _TEXT	
  endOfProc  . . . . . . . . . .	L Near	 000001F3 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
checkLocation  . . . . . . . . .	P Near	 000000D7 _TEXT	Length= 00000001 Public STDCALL
checkWin . . . . . . . . . . . .	P Near	 000000D8 _TEXT	Length= 00000001 Public STDCALL
farewell . . . . . . . . . . . .	P Near	 000001F8 _TEXT	Length= 00000020 Public STDCALL
generation . . . . . . . . . . .	P Near	 000000AB _TEXT	Length= 0000002B Public STDCALL
  generateMineLoop . . . . . . .	L Near	 000000B4 _TEXT	
  nextMine . . . . . . . . . . .	L Near	 000000C7 _TEXT	
getData  . . . . . . . . . . . .	P Near	 0000007A _TEXT	Length= 00000031 Public STDCALL
  getInputs  . . . . . . . . . .	L Near	 0000007B _TEXT	
introduction . . . . . . . . . .	P Near	 00000051 _TEXT	Length= 00000029 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000051 Public STDCALL
  gameLoop . . . . . . . . . . .	L Near	 00000020 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
userInput  . . . . . . . . . . .	P Near	 000000D6 _TEXT	Length= 00000001 Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BOARD_MAXSIZE  . . . . . . . . .	Number	 0000001Eh   
BOARD_MINSIZE  . . . . . . . . .	Number	 00000008h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_BOARDSIZE  . . . . . . . . .	Number	 00000384h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
boardlength  . . . . . . . . . .	DWord	 000000C1 _DATA	
boardsize  . . . . . . . . . . .	DWord	 000000BD _DATA	
board  . . . . . . . . . . . . .	DWord	 000000CD _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
game_state . . . . . . . . . . .	DWord	 000000C9 _DATA	
goodbye  . . . . . . . . . . . .	Byte	 0000008D _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instructions_1 . . . . . . . . .	Byte	 0000003D _DATA	
instructions_2 . . . . . . . . .	Byte	 00000069 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
line . . . . . . . . . . . . . .	Byte	 00000EE3 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
minecount  . . . . . . . . . . .	DWord	 000000C5 _DATA	
mine . . . . . . . . . . . . . .	Byte	 00000EED _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
space1 . . . . . . . . . . . . .	Byte	 00000EDD _DATA	
space2 . . . . . . . . . . . . .	Byte	 00000EEB _DATA	
underscore . . . . . . . . . . .	Byte	 00000EE7 _DATA	
unvisitedCell  . . . . . . . . .	DWord	 000000B9 _DATA	
welcome  . . . . . . . . . . . .	Byte	 00000000 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
